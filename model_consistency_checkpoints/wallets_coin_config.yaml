# CheckpointValidation
# CoinModel Config

# CheckpointValidation
# CoinModel Cleaning
# Variables used to clean and filter raw data before training data is built
data_cleaning:

    # Market data filters
    max_initial_market_cap: 999150_000_000  # coins above this market cap as of the start of the training period will be removed from all datasets
    max_gap_days: 50  # Maximum consecutive missing days to fill in price gaps (e.g., price interpolation for gaps up to 2 days)
    min_daily_volume: 500 # Minimum average daily volume the coin must have


# Variables used for comnverting the wallet scores into coin forecasts
coin_validation_analysis:

    # Forecasting methods
    top_n: 5  # how many of the top coins of a given sort method will be included in performance assessments
    sort_method: "top_wallet_balance_pct"  # which coin wallet metric to use for coin forecast rankings


# CheckpointValidation
# CoinModel Segments
wallet_segments:

    # Scores to include as segments + metrics
    wallet_scores_path: "temp/wallet_modeling_score_dfs"
    wallet_scores: [
        'net_gain_winsorized_checkpoint',
    ]

    # score_segment_quantiles: [0.1, 0.3, 0.5, 0.7, 0.9]  # higher is better; how to assign wallet a score segment
    score_segment_quantiles: [0.05, 0.15, 0.5, 0.85, 0.95]  # higher is better; how to assign wallet a score segment
    training_period_cluster_groups: [2]  # which n clusters assignment from the training period to segment by

    # where to save local files
    parquet_folder: 'temp/coin_modeling_dfs'


# CheckpointValidation
# CoinModel Features
wallet_features:

    # Balance metrics params
    wallet_balance_dates:

    # Score features params
    usd_materiality: 20 # Wallets with volume/balances below this won't be counted in medians/distributions/etc

    # Metrics to drop based on low observed importance
    drop_trading_metrics: [
        'average_transaction'
    ]

# CheckpointValidation
# CoinModel Modeling Config
# Variables used in the generation of the validation period coin model
coin_modeling:

    # Thresholds for coin inclusion in training data
    min_cohort_wallets: 25  # how many wallets must hold a coin for the coin to be elegible for forecasting
    min_cohort_balance: 20000  # how much USD all wallets must hold for the coin to be elegible for forecasting

    # Params used to remove unnecessary features
    feature_selection:
        variance_threshold: 0.0
        correlation_threshold: 1.0

    # Thresholds for coin inclusion in training data
    min_market_cap: 00_000  # coins below this market cap will not be included in performance assessments
    max_market_cap: 999350_000_000  # coins above this market cap will not be included in performance assessments

    # Target variable parameters
    target_variable: "coin_return_winsorized"
    # target_variable: "coin_return_pctile_full"
    # target_variable: "coin_return_pctile"
    train_test_split: 0.2  # test size

    returns_winsorization: 0.01
    drop_columns: []


    # CheckpointValidation
    # CoinModel Params
    model_type: "xgb"
    model_params:
        n_estimators: 300
        max_depth: 6
        learning_rate: 0.02
        subsample: 0.8
        colsample_bytree: 1.0
        min_child_weight: 5
        early_stopping_rounds: 20
        eval_metric: 'rmse'

        # non modeling metaparams
        random_state: 42
        n_jobs: -1

    # CheckpointValidation
    # CoinModel Grid Search
    grid_search_params:

        enabled: false # whether to grid search

        # Search methodology
        n_iter: 20  # random search limit
        scoring: 'neg_root_mean_squared_error'
        n_splits: 5  # cv splits
        n_jobs: -1
        verbose_level: 3  # scikit-learn verbosity

        # Params
        param_grid:
            # params to test
            regressor__max_depth: [4, 6, 8]
            regressor__min_child_weight_pct: [0.005, 0.01, 0.025]
            # regressor__subsample: [0.7, 0.85, 1.0]

            # params that keep the model speedy
            regressor__n_estimators: [150]
            regressor__learning_rate: [0.1]
