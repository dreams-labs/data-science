training_data:
  # Variables used to define the training data

  # Defining the modeling and training periods (dates must follow YYYY-MM-DD format)
  # The modeling period end date and training period start and end dates are automatically 
  # imputed using utils.py function calculate_period_dates() when load_config() is run
  modeling_period_start: '2024-03-01'  # Start date for the modeling period
  modeling_period_duration: 14    # Duration of the modeling period in days
  training_period_duration: 180    # Duration of the training period in days

  # Shark coin thresholds
  coin_minimum_inflows: 10000  # Minimum USD inflows for a coin to be considered a 'shark' coin
  coin_profits_threshold: 20000  # Lifetime absolute USD profit threshold for a 'shark' coin
  coin_return_threshold: 0.5  # Minimum lifetime percentage return threshold for a 'shark' coin (e.g., 50% ROI)

  # Shark wallet thresholds
  shark_wallet_type: 'is_shark'  # Shark wallet type identifier used in filtering
  wallet_min_coins: 3  # Minimum number of coins a wallet must hold to be considered a shark
  wallet_min_win_rate: 0.6  # Minimum percentage of coins that meet the shark coin thresholds for the wallet to be classified as a shark (40%)

data_cleaning:
  # Variables used to clean and filter raw data before training data is built

  # profits_df filters: The goal is to remove wallets that don't belong in the dataset (e.g., CEX, mint, contract wallets)
  profitability_filter: 15000000  # Exclude wallets with profits or losses greater than or equal to this amount (USD)
  inflows_filter: 10000000  # Exclude wallets with inflows greater than or equal to this amount (USD)

  # prices_df filters: Define how to handle missing price data
  max_gap_days: 2  # Maximum consecutive missing days to fill in price gaps (e.g., price interpolation for gaps up to 2 days)