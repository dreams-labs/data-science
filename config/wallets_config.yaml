# Variables used to define the training data
training_data:
    training_window_starts: [
        # "2023-06-01",
        # "2024-01-01",
        "2024-04-01",
        "2024-09-01",
        "2024-10-01"
    ]
    modeling_period_start: "2024-11-01"
    modeling_period_end: "2024-11-20"
    validation_period_end: "2024-11-30"

    # Local pipeline configs
    dataset: 'dev'  # Whether to query 'core' or 'dev_core' dataset tables
    parquet_folder: 'temp/wallet_modeling_dfs'  # where to store parquet files


# Variables used to clean and filter raw data before training data is built
data_cleaning:

    # Modeling period filters
    min_modeling_investment: 3000
    min_modeling_transaction_days: 3

    # Wallet cohort thresholds
    min_coins_traded: 3  # Exclude wallets that have traded fewer coins than this during the training period
    max_coins_traded: 50  # Exclude wallets that have traded more coins than this during the training period
    min_wallet_investment: 25000 # time weighted average balance filter
    max_wallet_investment: 10_000_000 # time weighted average balance filter
    min_wallet_volume: 10000  # Exclude wallets with fewer than this amount of training period USD volume
    max_wallet_volume: 25_000_000  # Exclude wallets with fewer than this amount of training period USD volume
    min_wallet_inflows: 50000  # Exclude wallets with inflows below this amount (USD)
    max_wallet_inflows: 100_000_000  # Exclude wallets with inflows greater than or equal to this amount (USD)
    max_wallet_profits: 100_000_000  # Exclude wallets with aggregate net gain above this amount (USD)

    # Market data filters
    max_initial_market_cap: 999150_000_000  # coins above this market cap as of the start of the training period will be removed from all datasets
    max_gap_days: 50  # Maximum consecutive missing days to fill in price gaps (e.g., price interpolation for gaps up to 2 days)
    min_daily_volume: 2000 # Minimum average daily volume the coin must have

    # Warnings about potential data gaps in profits_df or market_data_df
    coverage_decrease_audit_window: 10  # how far to look back to assess decreases in coverage
    price_coverage_warning_min_coin_increase: 100  # if this many coin prices has recently become imputed...
    price_coverage_warning_min_pct_increase: 0.03  # ...and the % of imputed coin prices has increased by this value, issue a warning
    transfers_coverage_warning_min_coin_increase: 150  # if this many coins have lost transfers data...
    transfers_coverage_warning_min_pct_increase: 0.05  # ...and the % of coin without transfers data has increased by this value, issue a warning

    # Market cap imputation filters
    min_mc_imputation_coverage: 0.3  # coins with market cap coverage below this level will have hardcoded market cap values filled
    max_mc_imputation_multiple: 3.0  # don't impute dates where the imputed market cap exceeds the max known market cap * this ratio
    market_cap_default_fill:  500000  # coins below the imputation coverage level will have empty values filled with this


# Variables used to define features
features:
    # Clustering params
    clustering_n_components: 25
    clustering_n_clusters: [2,4]

    # Market timing params
    offset_winsorization: 0.02 # comparisons between metrics and their offset values will be winsorized by this amount
    timing_metrics_min_transaction_size: 20  # trades below this USD threshold will not be evaluated for market timing peformance or transfers buyer sequencing



# Variables used for model generation
modeling:
    # Which wallet performance metric to use as the target variable. Options are:
    # invested, crypto_net_gain, return, risk_adj_return, performance_score, log_weighted_return, hybrid_score, size_adjusted_rank
    target_variable: "size_adjusted_rank"
    target_var_params:
        performance_score_return_weight: 0.6
    returns_winsorization: 0.01
    drop_columns: []

    # Model specifics
    model_type: "xgb"
    model_params:
        n_estimators: 300
        max_depth: 4
        learning_rate: 0.05
        subsample: 0.8
        colsample_bytree: 1.0
        min_child_weight: 5
        random_state: 42
        n_jobs: -1


# Variables used for comnverting the wallet scores into coin forecasts
coin_validation_analysis:

    # Params for coin_validation_df
    top_wallets_cutoff: 0.2  # what ntile a wallet's score has to be to counted as a top wallet

    # Forecasting methods
    top_n: 5  # how many of the top coins of a given sort method will be included in performance assessments
    sort_method: "top_wallet_balance_pct"  # which coin wallet metric to use for coin forecast rankings

    # Thresholds for coin inclusion in forecasts
    min_wallets: 3  # how many wallets must hold a coin for the coin to be elegible for forecasting
    min_balance: 10000  # how much USD all wallets must hold for the coin to be elegible for forecasting
    min_market_cap: 600_000  # coins below this market cap will not be included in performance assessments
    max_market_cap: 50_000_000  # coins above this market cap will not be included in performance assessments


# Variables used in the generation of the validation period coin model
coin_validation_model:

    target_variable: "coin_return"