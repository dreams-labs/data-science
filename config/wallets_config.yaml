# CheckpointValidation
# WalletModel Config


# CheckpointValidation
# WalletModel Period Boundaries
training_data:
    training_window_starts: [
        "2020-01-01",
        "2021-01-01",
        # "2022-01-01",
        "2023-01-01",
        # "2023-06-01",
        # "2023-09-01",
        "2024-01-01",
        # "2024-02-01",
        # "2024-03-01",
        "2024-04-01",
        # "2024-05-01",
        # "2024-06-01",
        # "2024-07-01",
        "2024-9-01",
        # "2024-10-01",
    ]
    modeling_period_start: "2024-10-01"
    modeling_period_end: "2024-10-31"
    validation_period_end: "2024-11-30"

    # Whether to use hybrid coin-wallet ids
    hybridize_wallet_ids: False  # if true, training data will be keyed on wallet-coin pairs

    # Local pipeline configs
    dataset: 'prod'  # Set to 'prod' or 'dev'; determines whether to query 'core' or 'dev' dataset tables
    parquet_folder: 'temp/wallet_modeling_dfs'  # where to store parquet files


# CheckpointValidation
# WalletModel Cleaning
data_cleaning:

    # Wallet cohort thresholds
    min_coins_traded: 1  # Exclude wallets that have traded fewer coins than this during the training period; overridden to 1 if hybrid IDs are used
    max_coins_traded: 50  # Exclude wallets that have traded more coins than this during the training period

    min_wallet_investment: 10000 # time weighted average balance filter
    min_wallet_inflows: 10000  # Exclude wallets with inflows below this amount (USD)
    min_wallet_volume: 10000  # Exclude wallets with fewer than this amount of training period USD volume

    max_wallet_investment: 10_000_000 # time weighted average balance filter
    max_wallet_inflows: 100_000_000  # Exclude wallets with inflows greater than or equal to this amount (USD)
    max_wallet_volume: 25_000_000  # Exclude wallets with fewer than this amount of training period USD volume
    max_wallet_profits: 100_000_000  # Exclude wallets with aggregate net gain above this amount (USD)

    # Market data filters
    max_initial_market_cap: 999150_000_000  # coins above this market cap as of the start of the training period will be removed from all datasets
    max_gap_days: 30  # Maximum consecutive missing days to fill in price gaps (e.g., price interpolation for gaps up to 2 days)
    min_daily_volume: 500 # Minimum average daily volume the coin must have

    # Warnings about potential data gaps in profits_df or market_data_df
    coverage_decrease_audit_window: 10  # how far to look back to assess decreases in coverage
    price_coverage_warning_min_coin_increase: 100  # if this many coin prices has recently become imputed...
    price_coverage_warning_min_pct_increase: 0.03  # ...and the % of imputed coin prices has increased by this value, issue a warning
    transfers_coverage_warning_min_coin_increase: 150  # if this many coins have lost transfers data...
    transfers_coverage_warning_min_pct_increase: 0.05  # ...and the % of coin without transfers data has increased by this value, issue a warning

    # Market cap imputation filters
    min_mc_imputation_coverage: 0.3  # coins with market cap coverage below this level will have hardcoded market cap values filled
    max_mc_imputation_multiple: 3.0  # don't impute dates where the imputed market cap exceeds the max known market cap * this ratio
    market_cap_default_fill:  500000  # coins below the imputation coverage level will have empty values filled with this


# CheckpointValidation
# WalletModel Features
features:
    # Trading Params
    include_twb_metrics: False

    # Performance Params
    returns_winsorization: 0.01
    ranking_ntiles: 4

    # Clustering Params
    clustering_n_components: 25
    clustering_n_clusters: [2,4]
    clustering_fill_method: 'fill_0'  # 'fill_0' or 'fill_mean'
    clustering_include_pca: False

    # Market Timing Params
    offset_winsorization: 0.02 # comparisons between metrics and their offset values will be winsorized by this amount
    timing_metrics_min_transaction_size: 20  # trades below this USD threshold will not be evaluated for market timing peformance or transfers buyer sequencing

    # Feature Selection
    feature_selection:



# CheckpointValidation
# WalletModel Modeling Config
modeling:

    # Modeling period filters
    modeling_min_investment: 100
    modeling_min_coins_traded: 0

    # Which wallet performance metric to use as the target variable.
    target_variable: "crypto_net_gain/max_investment/winsorized"
    train_test_split: 0.2  # test size

    # CheckpointValidation
    # WalletModel Feature Selection
    feature_selection:
        # Column patterns to remove
        drop_patterns: [
            # 'timing|*',
            'timing|*/buy_mean*',
            'timing|*/sell_mean*',
            'timing|*/sell_weighted*',

            # 'performance|*',
            'performance|*/log|*',
            'performance|*/ntile_rank|*',

            # 'trading|*',
            # 'trading|crypto_net_gain|*',
            # 'trading|total_volume|*',
            'trading|unique_coins_traded|*',
            'trading|transaction_days|*',
            'trading|average_transaction|*',
            'trading|activity_density|*',
            'trading|total_crypto_inflows|*',
            'trading|max_investment|*',
            'trading|net_crypto_investment|*',
            'trading|total_crypto_outflows|*',

            # 'mktcap|*',

            # 'transfers|*',

            'cluster|*',
            '*|w1',
        ]

        # Correlation/variance-based removal
        variance_threshold: -10.00 # features with this level of variance or less will be removed
        correlation_threshold: 1.95 # features above this correlation coefficient will be removed
        protected_features: [
            'cluster|'
        ]

    # CheckpointValidation
    # WalletModel Params
    # Model specifics
    model_type: "xgb"
    model_params:

        # Core Tree Params (Always Active)
        # -------------------------------
        eval_metric: ['rmse']

        max_depth: 25  # how deep the trees can go
        # min_child_weight_pct: 0.0001  # what % of rows each tree must have
        min_child_weight: 20  # what % of rows each tree must have
        subsample: 1.0  # samples rows, e.g. trees use x% of all wallet rows
        colsample_bytree: 0.9  # samples columns, e.g. trees use x% of all column features

        # Performance Profiles (Choose One Section)
        # --------------------------------------
        # CHECKPOINTER
        n_estimators: 400  # number of trees to train in the model
        learning_rate: 0.07  # step size for updates to weights during training
        early_stopping_rounds: 25  # stop training if no improvement after x rounds
        gamma: 0.005  # minimum gain required to split further on a leaf node
        tree_method: 'hist'  # method for building trees, e.g., histogram-based
        max_bin: 256  # how many bins to categorize features into

        # Threading Controls
        n_jobs: -1
        nthread: -1

        random_state: 42


    # CheckpointValidation
    # WalletModel Grid Search
    grid_search_params:

        # Turn On or Off
        # enabled: True # whether to grid search

        # Search Methodology
        n_iter: 50  # random search limit
        scoring: 'neg_root_mean_squared_error'
        n_splits: 2  # cv splits
        verbose_level: 3  # scikit-learn verbosity

        # Target variables
        target_variables: [
            "crypto_net_gain/max_investment/winsorized",
            # "crypto_net_gain/max_investment/ntile_rank",
        ]


        # Params
        param_grid:

            # # Depth and Child Weight
            regressor__min_child_weight_pct: [0.00004, 0.00007, 0.0001]
            regressor__max_depth: [21, 23, 25, 27]  # basic depth param

            # Col/Row Sampling
            # regressor__subsample: [0.8, 0.9, 1.0]
            # regressor__colsample_bytree: [0.8, 0.9, 1.0]

            # # Model Speed
            # regressor__tree_method: ['hist', 'approx', 'auto']
            # regressor__max_bin: [64, 128, 256]
            # regressor__gamma: [0.007, 0.01, 0.015]  # controls the minimum loss reduction needed to split a node


            # Tree Training Speed Overrides
            regressor__n_estimators: [200]
            regressor__learning_rate: [0.1]
            # regressor__gamma: [0.01]

            # Optimize for Speed
            regressor__n_jobs: [4]  # how many models to build at once
            regressor__nthread: [4]  # how many threads each model can use
            regressor__max_bin: [128]
            regressor__tree_method: ['hist']


            # Column Selection
            drop_columns__drop_patterns: [
                [],
                # ['timing|*'],
                # ['timing|price_sma_2/lead_21/*'],
                # ['timing|price_sma_2/lag_15/*'],
                # ['timing|price_sma_2/lag_21/*'],
                # ['timing|price_sma_2/lag_30/*'],
                # ['timing|*/buy_mean*'],
                # ['timing|*/sell_mean*'],
                # ['timing|*/buy_weighted*'],
                # ['timing|*/sell_weighted*'],
                # ['timing|price_rsi_*/*'],
                # ['timing|price_rsi_*/*'],
                # ['timing|mfi*/*'],
                # ['timing|obv*/*'],
                # ['timing|volume_sma_3/*'],
                # ['timing|volume_sma_7/*'],
                # ['timing|volume_sma_12/*_15*'],
                # ['timing|volume_sma_12/*_21*'],
                # ['timing|volume_sma_12/*_30*'],
                # ['timing|price_sma_*/*'],
                # ['timing|*/*_7/*'],
                # ['timing|*/*_21/*'],
                # ['timing|*/*_50/*'],
                # ['timing|*'],
                # ['performance|*/base|*'],
                # ['performance|*/winsorized|*'],
                # ['performance|*/log|*'],
                # ['performance|*/rank|*'],
                # ['performance|*/ntile_rank|*'],
                # ['trading|*'],
                # ['trading|crypto_net_gain|*'],
                # ['trading|unique_coins_traded|*'],
                # ['trading|transaction_days|*'],
                # ['trading|total_volume|*'],
                # ['trading|average_transaction|*'],
                # ['trading|activity_density|*'],
                # ['trading|total_crypto_inflows|*'],
                # ['trading|max_investment|*'],
                # ['trading|net_crypto_investment|*'],
                # ['trading|total_crypto_outflows|*'],
                # ['mktcap|*'],
                # ['transfers|*'],
                # ['transfers|avg_buyer_number|*'],
                # ['transfers|median_buyer_number|*'],
                # ['transfers|new_coin_buy_counts|*'],
                # ['transfers|min_buyer_number|*'],
                # ['cluster|*'],
                # ['*|w1'],
                # ['*|w2'],
                # ['*|w3'],
                # ['*|w4'],
                # ['*|all_windows'],
            ]


    # Coin model workflow params
    score_name: "iterating"  # reference name for feature columns etc
